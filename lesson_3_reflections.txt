When would you want to use a remote repository rather than keeping all your work
local?

    When you are working on a project with more than one person. When you are publishing your work for others to consume. When you care about having your work backed up remotely. When you need to access your work from another machine.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    To avoid pulling in changes that could conflict too frequently and disrupt work on a local change. To be able to pull in changes from another branch when the remote version of a branch may not be the desired branch anymore. To avoid pulling in changes from others that could have broken the remote branch.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are GitHub's way of cloning a repository and tracking the relationships between repositories. Clones are git's way of copying a repository in its entirety. The cloned repo automatically creates a remote from its source repo. Branches are commits with labels within a repository. Forking would only be used on GitHub. Cloning would be used to create a local copy of a GitHub repo or another copy of a local repo. Branches would be used to create new copies of other branches to continue different paths of work on.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can see what changes you've made in the local branch compared to what is known to be available to others on your team or users. If you're working offline you can reset a branch back to what is on the remote and start again or safely experiment applying changes to the last known state of the remote.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    We'd have to send our files to each other and use diff tools and reply with comments or review changes in person, which could be faster in some cases. In general it would much more difficult to collaborate with Git and a tool like GitHub. Keeping branches free of breakages would be hard. Giving feedback on changes to make a pull request would be harder. Tracking who did what when and history of merges would be harder.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Separate branches are good for collaborating and sending a request to merge a series of commits on the separate branch back into the main branch by project owners. Separate branches are also good for keeping track of separate changes from the main branch, like fixes or features that one might need to context switch between. Separate branches keeps the main branch more stable. Benefits of committing directly to master is that it is less commands to execute.
