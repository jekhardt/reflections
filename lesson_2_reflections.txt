What happens when you initialize a repository? Why do you need to do it?

  Git creates its files in the directory where git init was created. It needs to be done to create the tracking files that enable versioning the other non-git related files.

How is the staging area different from the working directory and the repository? What value do you think it offers?

  The staging area differs because it is what git sees as being includable in a commit. The working directory has the files in the filesystem regardless of whether they tracked by git. This is valuable to make many changes and make separate commits for the changes. It is also valuable to creating temporary changes that don't need to be committed, but still enable work that will be committed.

How can you use the staging area to make sure you have one commit per logical change?

  I can make multiple changes, but then only add specific files that are part of a logical change to the staging area so that the commit is free of unrelated changes.

What are some situations when branches would be helpful in keeping your history organized? How would branches help

  One situation could be when a complex feature is being worked that requires multiple commits, but the entire feature is not usable until all the commits are complete. It could also be used for experimenting with some approach that will not be used in the main branche. It could also be used for maintaining different versions of the product that need to be maintained that are out in the world.

How do the diagrams help you visualize the branch structure?

  They help by seeing what commits are visible in which branches and where the common touch points are among branches. It's much easier to see the changes in a visualization than separate lists.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  The commits from the non-current branch get merged into the current branch by having a new "merge" commit created on the current branch and brining in that branches commits and interleaving them by creation time in the log of the current branch. It is represented in the diagram that way because the parents of each commit remain the same as they were before. The merge commit has two parents, the latest from the current and branch being merged from.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

  A pro is that most changes are okay to automatically merge. When two developers are working on separate code, it would be a big waste of time to have to manually resolve a bunch of changes that aren't actually conflicts. There is a con sometimes though, especially where the order of lines has meaning in a file, like with a section header or preamble line that changes the behavior of the code.
